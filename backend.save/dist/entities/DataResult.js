"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HttpStatus = require('http-status-codes');
exports.DATA_RESULT_ERROR = 'E';
exports.DATA_RESULT_SINGLE = 'S';
exports.DATA_RESULT_LIST = 'L';
var DataPage = /** @class */ (function () {
    function DataPage(numItems, totalItems, totalPages, pageNumber, cleanQuery, verse) {
        if (cleanQuery === void 0) { cleanQuery = null; }
        if (verse === void 0) { verse = null; }
        this.numItems = 0;
        this.totalItems = 0;
        this.totalPages = 0;
        this.pageNumber = 0;
        this.cleanQuery = '';
        this.verse = null;
        this.numItems = numItems;
        this.totalItems = totalItems;
        this.totalPages = totalPages;
        this.pageNumber = pageNumber;
        this.cleanQuery = cleanQuery;
        this.verse = verse;
    }
    return DataPage;
}());
exports.DataPage = DataPage;
var DataResult = /** @class */ (function () {
    function DataResult(totalCount, offset, limit, data, cleanQuery, verse, code) {
        if (cleanQuery === void 0) { cleanQuery = null; }
        if (verse === void 0) { verse = null; }
        if (code === void 0) { code = HttpStatus.OK; }
        this.code = HttpStatus.OK;
        this.type = exports.DATA_RESULT_SINGLE;
        this.data = [];
        this.page = new DataPage(0, 0, 0, 0);
        if (Array.isArray(data)) {
            this.type = exports.DATA_RESULT_LIST;
            this.data = new Array();
            var totPages = 0;
            var pageNum = 0;
            if (totalCount > 0 && limit > 0) {
                totPages = Math.round(totalCount / limit);
                pageNum = Math.round((offset * limit) / limit);
            }
            this.page = new DataPage(data.length, totalCount, totPages, pageNum, cleanQuery, verse);
        }
        else {
            this.type = exports.DATA_RESULT_SINGLE;
        }
        this.data = data;
        this.code = code;
    }
    return DataResult;
}());
exports.DataResult = DataResult;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbnRpdGllcy9EYXRhUmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFbkMsUUFBQSxpQkFBaUIsR0FBRyxHQUFHLENBQUM7QUFDeEIsUUFBQSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDekIsUUFBQSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFFcEM7SUFRSSxrQkFBWSxRQUFnQixFQUFFLFVBQWtCLEVBQUUsVUFBa0IsRUFBRSxVQUFrQixFQUFFLFVBQWdDLEVBQUUsS0FBMEI7UUFBNUQsMkJBQUEsRUFBQSxpQkFBZ0M7UUFBRSxzQkFBQSxFQUFBLFlBQTBCO1FBUC9JLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDYixlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsZUFBVSxHQUFHLENBQUMsQ0FBQztRQUNmLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixlQUFVLEdBQWtCLEVBQUUsQ0FBQztRQUMvQixVQUFLLEdBQWlCLElBQUksQ0FBQztRQUc5QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBQ0wsZUFBQztBQUFELENBaEJBLEFBZ0JDLElBQUE7QUFoQlksNEJBQVE7QUFrQnJCO0lBTUksb0JBQVksVUFBa0IsRUFDbEIsTUFBYyxFQUNkLEtBQWEsRUFDYixJQUFrQixFQUNsQixVQUFnQyxFQUNoQyxLQUEwQixFQUMxQixJQUE0QjtRQUY1QiwyQkFBQSxFQUFBLGlCQUFnQztRQUNoQyxzQkFBQSxFQUFBLFlBQTBCO1FBQzFCLHFCQUFBLEVBQUEsT0FBZSxVQUFVLENBQUMsRUFBRTtRQVhqQyxTQUFJLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUNyQixTQUFJLEdBQVcsMEJBQWtCLENBQUM7UUFDbEMsU0FBSSxHQUFvQixFQUFFLENBQUM7UUFDM0IsU0FBSSxHQUFhLElBQUksUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBVTdDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLHdCQUFnQixDQUFDO1lBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUssQ0FBQztZQUMzQixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7WUFDakIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2hCLElBQUksVUFBVSxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUM7Z0JBQzFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO2FBQ2xEO1lBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzRjthQUFNO1lBQ0gsSUFBSSxDQUFDLElBQUksR0FBRywwQkFBa0IsQ0FBQztTQUNsQztRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFDTCxpQkFBQztBQUFELENBOUJBLEFBOEJDLElBQUE7QUE5QlksZ0NBQVUiLCJmaWxlIjoiZW50aXRpZXMvRGF0YVJlc3VsdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmVyc2V9IGZyb20gJy4vVmVyc2UnO1xuXG5jb25zdCBIdHRwU3RhdHVzID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcblxuZXhwb3J0IGNvbnN0IERBVEFfUkVTVUxUX0VSUk9SID0gJ0UnO1xuZXhwb3J0IGNvbnN0IERBVEFfUkVTVUxUX1NJTkdMRSA9ICdTJztcbmV4cG9ydCBjb25zdCBEQVRBX1JFU1VMVF9MSVNUID0gJ0wnO1xuXG5leHBvcnQgY2xhc3MgRGF0YVBhZ2Uge1xuICAgIHB1YmxpYyBudW1JdGVtcyA9IDA7XG4gICAgcHVibGljIHRvdGFsSXRlbXMgPSAwO1xuICAgIHB1YmxpYyB0b3RhbFBhZ2VzID0gMDtcbiAgICBwdWJsaWMgcGFnZU51bWJlciA9IDA7XG4gICAgcHVibGljIGNsZWFuUXVlcnk6IHN0cmluZyB8IG51bGwgPSAnJztcbiAgICBwdWJsaWMgdmVyc2U6IFZlcnNlIHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihudW1JdGVtczogbnVtYmVyLCB0b3RhbEl0ZW1zOiBudW1iZXIsIHRvdGFsUGFnZXM6IG51bWJlciwgcGFnZU51bWJlcjogbnVtYmVyLCBjbGVhblF1ZXJ5OiBzdHJpbmcgfCBudWxsID0gbnVsbCwgdmVyc2U6IFZlcnNlIHwgbnVsbCA9IG51bGwpIHtcbiAgICAgICAgdGhpcy5udW1JdGVtcyA9IG51bUl0ZW1zO1xuICAgICAgICB0aGlzLnRvdGFsSXRlbXMgPSB0b3RhbEl0ZW1zO1xuICAgICAgICB0aGlzLnRvdGFsUGFnZXMgPSB0b3RhbFBhZ2VzO1xuICAgICAgICB0aGlzLnBhZ2VOdW1iZXIgPSBwYWdlTnVtYmVyO1xuICAgICAgICB0aGlzLmNsZWFuUXVlcnkgPSBjbGVhblF1ZXJ5O1xuICAgICAgICB0aGlzLnZlcnNlID0gdmVyc2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVJlc3VsdDxUPiB7XG4gICAgcHVibGljIGNvZGUgPSBIdHRwU3RhdHVzLk9LO1xuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmcgPSBEQVRBX1JFU1VMVF9TSU5HTEU7XG4gICAgcHVibGljIGRhdGE6IEl0ZXJhYmxlPFQ+IHwgVCA9IFtdO1xuICAgIHB1YmxpYyBwYWdlOiBEYXRhUGFnZSA9IG5ldyBEYXRhUGFnZSgwLCAwLCAwLCAwKTtcblxuICAgIGNvbnN0cnVjdG9yKHRvdGFsQ291bnQ6IG51bWJlcixcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG51bWJlcixcbiAgICAgICAgICAgICAgICBsaW1pdDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIGRhdGE6IEFycmF5PFQ+IHwgVCxcbiAgICAgICAgICAgICAgICBjbGVhblF1ZXJ5OiBzdHJpbmcgfCBudWxsID0gbnVsbCxcbiAgICAgICAgICAgICAgICB2ZXJzZTogVmVyc2UgfCBudWxsID0gbnVsbCxcbiAgICAgICAgICAgICAgICBjb2RlOiBudW1iZXIgPSBIdHRwU3RhdHVzLk9LXG4gICAgKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBEQVRBX1JFU1VMVF9MSVNUO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gbmV3IEFycmF5PFQ+KCk7XG4gICAgICAgICAgICBsZXQgdG90UGFnZXMgPSAwO1xuICAgICAgICAgICAgbGV0IHBhZ2VOdW0gPSAwO1xuICAgICAgICAgICAgaWYgKHRvdGFsQ291bnQgPiAwICYmIGxpbWl0ID4gMCkge1xuICAgICAgICAgICAgICAgIHRvdFBhZ2VzID0gTWF0aC5yb3VuZCh0b3RhbENvdW50IC8gbGltaXQpO1xuICAgICAgICAgICAgICAgIHBhZ2VOdW0gPSBNYXRoLnJvdW5kKChvZmZzZXQgKiBsaW1pdCkgLyBsaW1pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhZ2UgPSBuZXcgRGF0YVBhZ2UoZGF0YS5sZW5ndGgsIHRvdGFsQ291bnQsIHRvdFBhZ2VzLCBwYWdlTnVtLCBjbGVhblF1ZXJ5LCB2ZXJzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBEQVRBX1JFU1VMVF9TSU5HTEU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB9XG59XG5cbiJdfQ==
