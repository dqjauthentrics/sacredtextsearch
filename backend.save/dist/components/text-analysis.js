"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _stop_words_1 = require("./_stop-words");
var TextAnalysis = /** @class */ (function () {
    function TextAnalysis() {
    }
    TextAnalysis.prototype.buildWordFrequencyList = function (hits) {
        var fullText = {};
        var list = [];
        if (hits) {
            try {
                for (var i = 0; i < hits.length; i++) {
                    var item = hits[i];
                    var verse = this.cleanText(item.verse.body);
                    var words = this.getWords(verse);
                    for (var j = 0; j < words.length; j++) {
                        var word = words[j];
                        if (fullText[word] === undefined) {
                            fullText[word] = 1;
                        }
                        else {
                            fullText[word]++;
                        }
                    }
                }
                for (var word in fullText) {
                    if (fullText.hasOwnProperty(word)) {
                        if (fullText[word] > 1) {
                            list.push({ size: fullText[word], text: word });
                        }
                    }
                }
            }
            catch (exception) {
                console.warn('TextAnalysis Exception:', exception);
            }
        }
        return list;
    };
    TextAnalysis.prototype.cleanText = function (text) {
        if (text) {
            return text.replace(/[^\w\s]/g, '').trim();
        }
        return '';
    };
    TextAnalysis.prototype.getWords = function (cleanedText) {
        if (cleanedText) {
            var words = cleanedText.toLowerCase().split(' ');
            return this.strip(words);
        }
        return '';
    };
    TextAnalysis.prototype.strip = function (words) {
        var newList = [];
        if (words) {
            for (var i = 0; i < words.length; i++) {
                if (_stop_words_1.stopWordList.indexOf(words[i]) < 0) {
                    newList.push(words[i]);
                }
            }
        }
        return newList;
    };
    return TextAnalysis;
}());
exports.TextAnalysis = TextAnalysis;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL3RleHQtYW5hbHlzaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBMkM7QUFXM0M7SUFBQTtJQThEQSxDQUFDO0lBNURVLDZDQUFzQixHQUE3QixVQUE4QixJQUFrQztRQUM1RCxJQUFNLFFBQVEsR0FBUSxFQUFFLENBQUM7UUFDekIsSUFBTSxJQUFJLEdBQW1DLEVBQUUsQ0FBQztRQUNoRCxJQUFJLElBQUksRUFBRTtZQUNOLElBQUk7Z0JBQ0EsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ2xDLElBQU0sSUFBSSxHQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDMUIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM5QyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTt3QkFDbkMsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN0QixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7NEJBQzlCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7eUJBQ3RCOzZCQUNJOzRCQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO3lCQUNwQjtxQkFDSjtpQkFDSjtnQkFDRCxLQUFLLElBQUksSUFBSSxJQUFJLFFBQVEsRUFBRTtvQkFDdkIsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUMvQixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7NEJBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO3lCQUNqRDtxQkFDSjtpQkFDSjthQUNKO1lBQ0QsT0FBTyxTQUFTLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUN0RDtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLGdDQUFTLEdBQWhCLFVBQWlCLElBQVk7UUFDekIsSUFBSSxJQUFJLEVBQUU7WUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzlDO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRU0sK0JBQVEsR0FBZixVQUFnQixXQUFtQjtRQUMvQixJQUFJLFdBQVcsRUFBRTtZQUNiLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRU0sNEJBQUssR0FBWixVQUFhLEtBQW9CO1FBQzdCLElBQUksT0FBTyxHQUFrQixFQUFFLENBQUM7UUFDaEMsSUFBSSxLQUFLLEVBQUU7WUFDUCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSwwQkFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzFCO2FBQ0o7U0FDSjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFDTCxtQkFBQztBQUFELENBOURBLEFBOERDLElBQUE7QUE5RFksb0NBQVkiLCJmaWxlIjoiY29tcG9uZW50cy90ZXh0LWFuYWx5c2lzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdG9wV29yZExpc3R9IGZyb20gJy4vX3N0b3Atd29yZHMnO1xuaW1wb3J0IHtTZWFyY2hSZXN1bHRJbnRlcmZhY2V9IGZyb20gJy4uL2ludGVyZmFjZXMvc2VhcmNoLXJlc3VsdC5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIFByb3ZpZGVzIHRleHQgYW5hbHlzaXMgc3VwcG9ydCBmb3Igc2VhcmNoZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dEFuYWx5c2lzRnJlcXVlbmNpZXMge1xuICAgIHNpemU6IG51bWJlcjtcbiAgICB0ZXh0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBUZXh0QW5hbHlzaXMge1xuXG4gICAgcHVibGljIGJ1aWxkV29yZEZyZXF1ZW5jeUxpc3QoaGl0czogQXJyYXk8U2VhcmNoUmVzdWx0SW50ZXJmYWNlPikge1xuICAgICAgICBjb25zdCBmdWxsVGV4dDogYW55ID0ge307XG4gICAgICAgIGNvbnN0IGxpc3Q6IEFycmF5PFRleHRBbmFseXNpc0ZyZXF1ZW5jaWVzPiA9IFtdO1xuICAgICAgICBpZiAoaGl0cykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhpdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbTogYW55ID0gaGl0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyc2UgPSB0aGlzLmNsZWFuVGV4dChpdGVtLnZlcnNlLmJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IHRoaXMuZ2V0V29yZHModmVyc2UpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHdvcmRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkID0gd29yZHNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVsbFRleHRbd29yZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxUZXh0W3dvcmRdID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxUZXh0W3dvcmRdKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgd29yZCBpbiBmdWxsVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZnVsbFRleHQuaGFzT3duUHJvcGVydHkod29yZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmdWxsVGV4dFt3b3JkXSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2goe3NpemU6IGZ1bGxUZXh0W3dvcmRdLCB0ZXh0OiB3b3JkfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdUZXh0QW5hbHlzaXMgRXhjZXB0aW9uOicsIGV4Y2VwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFuVGV4dCh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1teXFx3XFxzXS9nLCAnJykudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0V29yZHMoY2xlYW5lZFRleHQ6IHN0cmluZykge1xuICAgICAgICBpZiAoY2xlYW5lZFRleHQpIHtcbiAgICAgICAgICAgIGxldCB3b3JkcyA9IGNsZWFuZWRUZXh0LnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0cmlwKHdvcmRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgcHVibGljIHN0cmlwKHdvcmRzOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgICAgIGxldCBuZXdMaXN0OiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgICAgIGlmICh3b3Jkcykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChzdG9wV29yZExpc3QuaW5kZXhPZih3b3Jkc1tpXSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0xpc3QucHVzaCh3b3Jkc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdMaXN0O1xuICAgIH1cbn1cbiJdfQ==
